#!/usr/bin/env python

import os
import socket
import sys
import time

twclicmd = '/bin/tw_cli'

class Host(object):
    def __init__(self):
        self.hostname = socket.gethostname()

        try:
            cli = os.popen("%s show 2>&1" % twclicmd)
        except Exception, e:
            print "Error running tw_cli: %s" % e
            sys.exit(1)

        self.controllers = []
        for line in cli.readlines():
            if line != '\n':
                line = line.split()
                if line[0][0] == 'c': self.controllers.append(Controller(line[0]))
        cli.close()

    def __str__(self):
        return "Host %s containing %s" % (self.hostname, ', '.join([str(a) for a in self.controllers]))

    def has_errors(self):
        for controller in self.controllers:
            if controller.has_errors():
                return True
            else: return False

    def has_warnings(self):
        for controller in self.controllers:
            if controller.has_warnings():
                return True
            else: return False

    def get_errors(self): 
        for controller in self.controllers:
            if controller.has_errors():
                errstr = ', controller '.join(controller.errlist)
                errstr = "3Ware controller %s" % errstr
        return errstr

    def get_warnings(self): 
        for controller in self.controllers:
            if controller.has_warnings():
                errstr = ', controller '.join(controller.warnlist)
                errstr = "3Ware controller %s" % errstr
        return errstr


class Controller(object):
    def __init__(self ,name):
        self.name = name

        try:
            cli = os.popen("%s /%s show 2>&1" % (twclicmd, self.name))
        except Exception, e:
            print "Error running tw_cli: %s" % e
            sys.exit(1)

        status = []
        for line in cli.readlines():
            if line != '\n': status.append(line[:-1])
        cli.close()

        (unitstat, portstat, bbustat) = ([], [], [])
        for line in status:
            line = line.split()
            if line[0][0] == 'u':
                unitstat.append((line[0], line[2], line[4]))

            if line[0][0] == 'p':
                portstat.append((line[0], line[1]))

            if line[0][0] == 'b':
                bbustat.append((line[0], line[3]))

        (self.errlist, self.warnlist) = ([], [])
        for unit in unitstat:
            if unit[1] != 'OK':
                if unit[1] == 'VERIFYING' or unit[1] == 'INITIALIZING':
                    self.warnlist.append("%s unit %s is %s (%s)" % (self.name, unit[0], unit[1], unit[2]))
                else:
                    self.errlist.append("%s unit %s is %s" % (self.name, unit[0], unit[1]))

        for port in portstat:
            if port[1] != 'OK' and port[1] != 'NOT-PRESENT':
                if not ( port[1] == 'ECC-ERROR' and ignore_ecc ):
                    self.errlist.append("%s port %s is %s" % (self.name, port[0], port[1]))

        if check_bbu:
            if bbustat == []:
                self.warnlist.append("%s BBU not present" % self.name)
            else:
                for bbu in bbustat:
                    if bbu[1] != 'OK': self.errlist.append("%s BBU %s" % (self.name, bbu[1]))

    def __str__(self): return "3Ware Controller %s" % self.name

    def has_errors(self): 
        if len(self.errlist) == 0: return False
        else: return True

    def has_warnings(self): 
        if len(self.warnlist) == 0: return False
        else: return True


if __name__ == '__main__':
    (check_bbu, debug, ignore_ecc) = (True, False, False)

    if len(sys.argv) > 1:
        if '-b' in sys.argv:
            check_bbu = False
        if '-d' in sys.argv:
            debug = True
        if '-e' in sys.argv:
            ignore_ecc = True

    server = Host()
    if len(server.controllers) == 0:
        print "CRIT: %s found no 3ware raid controllers." % server.hostname
        sys.exit(2)

    if debug: print server

    if server.has_errors():
        errstr = server.get_errors()
        print "CRIT: %s" % errstr
        if not debug: sys.exit(2)

    if server.has_warnings():
        errstr = server.get_warnings()
        print "WARN: %s" % errstr
        if not debug: sys.exit(1)

    if server.has_errors(): sys.exit(2)
    if server.has_warnings(): sys.exit(1)
    print "OK: %s" %  server
    sys.exit(0)

